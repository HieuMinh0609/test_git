package com.vnpost.elearning.service;


import com.vnpost.elearning.converter.CandidateConverter;
import com.vnpost.elearning.converter.CompetitionConverter;
import com.vnpost.elearning.converter.RoundTestConverter;
import com.vnpost.elearning.dto.*;

import com.vnpost.elearning.dto.customDTO.CustomProcessCompeDTO;

import com.vnpost.elearning.converter.CompetitionConverter;
import com.vnpost.elearning.converter.RoundTestConverter;
import com.vnpost.elearning.dto.CompetionCategoryDTO;
import com.vnpost.elearning.dto.CompetitionDTO;
import com.vnpost.elearning.dto.PoscodeVnpostDTO;
import com.vnpost.elearning.dto.RoundTestDTO;

import com.vnpost.elearning.repository.CompetitionCustom;
import com.vnpost.elearning.security.MyUser;
import eln.common.core.entities.Candidate;
import eln.common.core.entities.Competition;
import eln.common.core.entities.QuestionRoundTest;
import eln.common.core.entities.RoundTest;
import eln.common.core.repository.CandidateRepository;
import eln.common.core.repository.CompetitionRepository;
import eln.common.core.repository.QuestionRoundTestRepository;
import eln.common.core.repository.RoundTestRepository;
import org.hibernate.Session;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.stereotype.Service;

import javax.persistence.EntityManager;
import javax.persistence.EntityManagerFactory;
import javax.persistence.Query;
import java.util.*;
import java.util.stream.Collectors;

public class CompetitionService extends CommonRepository<Competition,CompetitionRepository> {
    @Autowired private CompetitionRepository competitionRepository;
    @Autowired private RoundTestRepository roundTestRepository;
    @Autowired private RoundTestConverter roundTestConverter;
    @Autowired EntityManager entityManager;
    @Autowired private CompetitionConverter competitionConverter;
    @Autowired private CompetitionCategoryService categoryService;
    @Autowired private RoundTestService roundTestService;
    @Autowired private PoscodeVnpostService poscodeVnpostService;
    @Autowired EntityManagerFactory entityManagerFactory;
    @Autowired private QuestionRoundTestRepository questionRoundTestRepository;
    @Autowired private CompetitionCustom competitionCustom;
    @Autowired
    private CandidateRepository candidateRepository;


    public CompetitionService(CompetitionRepository repo) {
        super(repo);
    }
    
    private List<RoundTestDTO> setRoundTestDTO(Competition competition) {
        List<RoundTestDTO> roundTestDTOList = new ArrayList<>();
        List<RoundTest> roundTestList = roundTestRepository.findByIdCompetition(competition.getId());
        for (RoundTest r : roundTestList) {
            RoundTestDTO roundTestDTO = roundTestConverter.convertToDTO(r);
            roundTestDTOList.add(roundTestDTO);
        }

        return roundTestDTOList;
    }

    private void setValueMap(CompetitionDTO model, Map<String, Object> property) {

        if (model.getCategory_value() != null) {
            property.put("competitionCategory.id", model.getCategory_value());
        }
        if (model.getSearchValue() != null) {
            property.put("poscodeVnpost.id", model.getSearchValue());
        }
        if (model.getStatus_search_value() != null) {
            property.put("statusCompetition", model.getStatus_search_value());
        }
        if (model.getNameCompetition() != null) {
            property.put("nameCompetition", model.getNameCompetition());
        }

    }


    public CompetitionDTO save(CompetitionDTO competitionDTO) {
        Competition competition = competitionConverter.convertToEntity(competitionDTO);
        competitionDTO = competitionConverter.convertToDTO(competitionRepository.save(competition));

        return competitionDTO;
    }

   


  public boolean delete(long[] ids) {
    try {
      for (long l : ids) {
        for (RoundTest r : roundTestRepository.findByIdCompetition(l)) {
          roundTestRepository.delete(r);
        }
        competitionRepository.deleteById(l);
      }
    } catch (Exception e) {
      e.getMessage();
      return false;
    }

    return true;
  }

  public CompetitionDTO findById(long id) {
    CompetitionDTO competitionDTO =
        competitionConverter.convertToDTO(competitionRepository.findById(id).get());
    return competitionDTO;
  }

  public Object[] getListCompetitions(CompetitionDTO model) {
    Map<String, Object> map = new HashMap<String, Object>();
    Integer offset = model.getFirstItem();
    try {
      if (model.getPage() != null && model.getPage() > 1) {

        offset = ((model.getPage() - 1) * model.getMaxPageItems());
      }
      setValueMapHomepage(model, map);
      Object[] objects =
          competitionCustom.findByPropertyLikeSQL(
              map, "c.time_create", "2", offset, model.getMaxPageItems());
      List<CompetitionDTO> list = new ArrayList<>();
      for (Competition competition : (List<Competition>) objects[0]) {
        CompetitionDTO competitionDTO = competitionConverter.convertToDTO(competition);
        list.add(competitionDTO);
      }
      objects[0] = list;
      return objects;

    } catch (Exception e) {
      System.out.println(e.getMessage());
      return null;
    }
  }

  private void setValueMapHomepage(CompetitionDTO model, Map<String, Object> map) {
    map.put("status_competition", 0);
    map.put("checkcourseware", 0);
    if (model.getNameCompetition() != null) {
      map.put("c.name_competition", model.getNameCompetition());
    }
    if (model.getCategory_value() != null) {
      map.put("id_competition_category", model.getCategory_value());
    }
  }

  public List<Competition> getListCompetitionsAndCheckCourseWare() {
    String hqlString = "from Competition d where d. statusCompetition=0 and d.checkcourseware=1 ";
    List<Competition> list = entityManager.createQuery(hqlString).getResultList();
    return list;
  }

  public List<Competition> getHightLight() {
    Session session = entityManagerFactory.createEntityManager().unwrap(Session.class);
    String hqlString =
        "from Competition d where d.statusCompetition=0 and d.checkcourseware=0 and d.highlight=0 order by d.timeCreate desc ";
    Query query = session.createQuery(hqlString).setFirstResult(0).setMaxResults(6);
    List<Competition> list = query.getResultList();
    return list;
  }

  public Competition findById_jonas(long id) {
    Session session = entityManagerFactory.createEntityManager().unwrap(Session.class);
    return session.find(Competition.class, id);
  }

  public List<Competition> getListFindByName(String a, int id) {
    Session session = entityManagerFactory.createEntityManager().unwrap(Session.class);
    String hqlString =
        "from Competition d where d. statusCompetition=:id and d.nameCompetition like :cid";

    Query query = session.createQuery(hqlString);
    query.setParameter("id", id);
    query.setParameter("cid", "%" + a + "%");
    List<Competition> list = query.getResultList();

    return list;
  }

  public CompetitionDTO update(CompetitionDTO competitionDTO) {
    CompetitionDTO compet = setUpdateCompetition(competitionDTO);
    CompetitionDTO cDto =
        competitionConverter.convertToDTO(
            competitionRepository.save(competitionConverter.convertToEntity(compet)));
    saveRoundTest(competitionDTO, cDto);
    return cDto;
  }

  private CompetionCategoryDTO getcompetitionCategory(String category_value) {
    CompetionCategoryDTO categoryDTO = categoryService.findById(Long.parseLong(category_value));
    return categoryDTO;
  }

  private CompetitionDTO setUpdateCompetition(CompetitionDTO competitionDTO) {
    Competition compe = competitionRepository.findById(competitionDTO.getId()).get();
    CompetitionDTO cDto = new CompetitionDTO();
    cDto.setId(competitionDTO.getId());
    cDto.setNameCompetition(competitionDTO.getNameCompetition());
    cDto.setStatusCompetition(Integer.parseInt(competitionDTO.getStatus_search_value()));
    cDto.setCompetitionCategory(getcompetitionCategory(competitionDTO.getCategory_value()));
    cDto.setDescribe(competitionDTO.getDescribe());
    cDto.setPoscodeVnpost(getPoscodeVnpsot(competitionDTO.getId_unit()));
    cDto.setTimeCreate(compe.getTimeCreate());
    cDto.setLastUpdate(java.util.Calendar.getInstance().getTime());
    cDto.setImageCompetition(competitionDTO.getImageCompetition());
    if (competitionDTO.getTimeEnd() != null && competitionDTO.getTimeStart() != null) {

      cDto.setTimeStart(competitionDTO.getTimeStart());
      cDto.setTimeEnd(competitionDTO.getTimeStart());
    }

    return cDto;
  }

  private PoscodeVnpostDTO getPoscodeVnpsot(String id_unit) {
    PoscodeVnpostDTO poscodeVnpostDTO = poscodeVnpostService.findById(id_unit);
    return poscodeVnpostDTO;
  }

  private void saveRoundTest(CompetitionDTO competitionDTO, CompetitionDTO campeSaved) {
    if (competitionDTO.getListArray() != null) {

      for (String s : competitionDTO.getListArray()) {
        RoundTestDTO roundTestDTO = new RoundTestDTO();
        roundTestDTO.setNameRound(s);
        roundTestDTO.setStatusRound(1);
        roundTestDTO.setCompetition(campeSaved);
        roundTestDTO.setTimeCreate(java.util.Calendar.getInstance().getTime());
        roundTestDTO.setLastUpdate(java.util.Calendar.getInstance().getTime());
        roundTestService.save(roundTestDTO);
      }
    }
  }

  public List<Competition> getListCompetitionsFromCategory(Long id) {
    Session session = entityManagerFactory.createEntityManager().unwrap(Session.class);
    String hqlString = "from Competition d where d.competitionCategory.id=:cid";
    Query query = session.createQuery(hqlString);
    query.setParameter("cid", id);
    List<Competition> list = query.getResultList();
    return list;
  }

  public Competition findByCourseId(Long courseId) {
    return competitionRepository.findByCourseId(courseId);
  }

  public List<CompetitionDTO> findAllActiveCompetition() {
    return competitionRepository.findAllByStatusCompetition(0).stream()
        .map(competitionConverter::convertToDTO)
        .collect(Collectors.toList());
  }

  public Object[] getListCompetitionMyCompe(CompetitionDTO model) {
    MyUser user = (MyUser) SecurityContextHolder.getContext().getAuthentication().getPrincipal();
    Map<String, Object> map = new HashMap<String, Object>();
    Integer offset = setOffset(model);
    try {
      setValueMapHomepage(model, map);
      Object[] objects =
          competitionCustom.findByPropertyLikeSQLMyCompe(
              map, user.getId(), offset, model.getMaxPageItems());
      List<CompetitionDTO> list =
          ((List<Competition>) objects[0])
              .stream()
                  .map(item -> competitionConverter.convertToDTO(item))
                  .collect(Collectors.toList());
      objects[0] = list;
      return objects;

    } catch (Exception e) {
      System.out.println(e.getMessage());
      return null;
    }
  }

  private Integer setOffset(CompetitionDTO model) {
    if (model.getPage() != null && model.getPage() > 1) {
      return ((model.getPage() - 1) * model.getMaxPageItems());
    }
    return model.getFirstItem();
  }

<<<<<<< HEAD

    public List<Competition> getListFindByName(String a, int id) {
        Session session = entityManagerFactory.createEntityManager().unwrap(Session.class);
        String hqlString = "from Competition d where d. statusCompetition=:id and d.nameCompetition like :cid";

        Query query = session.createQuery(hqlString);
        query.setParameter("id", id);
        query.setParameter("cid", "%" + a + "%");
        List<Competition> list = query.getResultList();

        return list;
    }



    public CompetitionDTO update(CompetitionDTO competitionDTO) {
        CompetitionDTO compet = setUpdateCompetition(competitionDTO);
        CompetitionDTO cDto = competitionConverter.convertToDTO(competitionRepository.save(competitionConverter.convertToEntity(compet)));
        saveRoundTest(competitionDTO, cDto);
        return cDto;
    }

    private CompetionCategoryDTO getcompetitionCategory(String category_value) {
        CompetionCategoryDTO categoryDTO = categoryService.findById(Long.parseLong(category_value));
        return categoryDTO;
    }

    private CompetitionDTO setUpdateCompetition(CompetitionDTO competitionDTO) {
        Competition compe = competitionRepository.findById(competitionDTO.getId()).get();
        CompetitionDTO cDto = new CompetitionDTO();
        cDto.setId(competitionDTO.getId());
        cDto.setNameCompetition(competitionDTO.getNameCompetition());
        cDto.setStatusCompetition(Integer.parseInt(competitionDTO.getStatus_search_value()));
        cDto.setCompetitionCategory(getcompetitionCategory(competitionDTO.getCategory_value()));
        cDto.setDescribe(competitionDTO.getDescribe());
        cDto.setPoscodeVnpost(getPoscodeVnpsot(competitionDTO.getId_unit()));
        cDto.setTimeCreate(compe.getTimeCreate());
        cDto.setLastUpdate(java.util.Calendar.getInstance().getTime());
        cDto.setImageCompetition(competitionDTO.getImageCompetition());
        if (competitionDTO.getTimeEnd() != null && competitionDTO.getTimeStart() != null) {

            cDto.setTimeStart(competitionDTO.getTimeStart());
            cDto.setTimeEnd(competitionDTO.getTimeStart());
        }

        return cDto;
    }

   

    private void saveRoundTest(CompetitionDTO competitionDTO, CompetitionDTO campeSaved) {
        if (competitionDTO.getListArray() != null) {


            for (String s : competitionDTO.getListArray()) {
                RoundTestDTO roundTestDTO = new RoundTestDTO();
                roundTestDTO.setNameRound(s);
                roundTestDTO.setStatusRound(1);
                roundTestDTO.setCompetition(campeSaved);
                roundTestDTO.setTimeCreate(java.util.Calendar.getInstance().getTime());
                roundTestDTO.setLastUpdate(java.util.Calendar.getInstance().getTime());
                roundTestService.save(roundTestDTO);
            }
        }

    }

    public List<Competition> getListCompetitionsFromCategory(Long id) {
        Session session = entityManagerFactory.createEntityManager().unwrap(Session.class);
        String hqlString = "from Competition d where d.competitionCategory.id=:cid";
        Query query = session.createQuery(hqlString);
        query.setParameter("cid", id);
        List<Competition> list = query.getResultList();
        return list;
    }

    public List<Competition> findCompetitionNotInCourse(Long idCourse) {
        return competitionRepository.findCompetitionNotInCourse(idCourse);
    }


  

    public   Object[] getListCompetitionMyCompe(CompetitionDTO model) {
        MyUser user = (MyUser) SecurityContextHolder.getContext().getAuthentication().getPrincipal();
        Map<String, Object> map = new HashMap<String, Object>();
        Integer offset = setOffset(model);
        try {
            setValueMapHomepage(model, map);
            Object[] objects = competitionCustom.findByPropertyLikeSQLMyCompe(map, user.getId(), offset, model.getMaxPageItems());
            List<CompetitionDTO> list = ((List<Competition>) objects[0]).stream()
                    .map(item -> competitionConverter.convertToDTO(item))
                    .collect(Collectors.toList());
            objects[0] = list;
            setStatusRoundTest(list,user.getId());
            return objects;

        } catch (Exception e) {
            System.out.println(e.getMessage());
            return null;
        }
    }

    private void setStatusRoundTest(List<CompetitionDTO> list,Long idUser) {
        for (CompetitionDTO competitionDTO : list) {
            List<RoundTestDTO> roundTestDTOList = roundTestService.findByIdCompetition(competitionDTO.getId());
            List<CustomProcessCompeDTO> customProcessCompeDTOs = new ArrayList<>();
            List<Candidate> candidates = new ArrayList<>();
            for (RoundTestDTO roundTestDTO : roundTestDTOList) {
                CustomProcessCompeDTO customProcessCompeDTO = new CustomProcessCompeDTO();
                candidates = candidateRepository.findListByIdUser(idUser, roundTestDTO.getId());
                if(candidates.size()>0){
                    Candidate candidate = (Candidate) filterCandidate(candidates)[0];
                    customProcessCompeDTO.setResult(candidate.getResult());
                    customProcessCompeDTO.setTotalQuestion(Integer.parseInt(filterCandidate(candidates)[1].toString()));
                    customProcessCompeDTO.setPoint(candidate.getPoint());
                    customProcessCompeDTO.setStatus(candidate.getStatus());
                }else {
                    customProcessCompeDTO.setStatus(3);
                }
                customProcessCompeDTOs.add(customProcessCompeDTO);
            }
            competitionDTO.setCustomProcessCompeDTOs(customProcessCompeDTOs);
        }
    }

    private Object[] filterCandidate(List<Candidate> candidate) {
        Integer max=-1000;
        Integer index=0;
        Integer TotalQuestion =0;
        try {
            for (int i=0;i<candidate.size();i++){
                if(max<candidate.get(i).getResult()){
                    max = candidate.get(i).getResult();
                    index=i;
                }
            }
        TotalQuestion =  questionRoundTestRepository.countByIdRoundTest(candidate.get(index).getRoundTest().getId()+"");
        }catch (Exception e){
            return  new Object[]{candidate.get(index), TotalQuestion};
        }
        return  new Object[]{candidate.get(index), TotalQuestion};
    }

    private Integer setOffset(CompetitionDTO model) {
        if (model.getPage() != null && model.getPage() > 1) {
           return ((model.getPage() - 1) * model.getMaxPageItems());
        }
        return model.getFirstItem();
    }

    public List<Competition> findDisctictByRoundTestIds(List<Long> ids) {
        Set<Long> idCompetitons = new HashSet<>();
        for (Long idRoundTest : ids) {
            idCompetitons.add(roundTestService.findByid(idRoundTest).getCompetition().getId());
        }
        List<Competition> competitions = competitionRepository.findAllByIdIn(idCompetitons.stream().collect(Collectors.toList()));
        return competitions;
=======
  public List<Competition> findDisctictByRoundTestIds(List<Long> ids) {
    Set<Long> idCompetitons = new HashSet<>();
    for (Long idRoundTest : ids) {
      idCompetitons.add(roundTestService.findByid(idRoundTest).getCompetition().getId());
>>>>>>> 633fb670a29a7e0c945e443e03e33707914c7dbc
    }
    List<Competition> competitions =
        competitionRepository.findAllByIdIn(idCompetitons.stream().collect(Collectors.toList()));
    return competitions;
  }
}


test lần 3
test lần 4